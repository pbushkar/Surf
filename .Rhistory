errorest(formula=SellYear ~ StyleCat:LengthF, data=DFStrainVal, estimator = "cv",predict= mypredict.lda)
errorest(formula=logm12, data=DFStrainVal, estimator = "cv",predict= mypredict.lda)
logm12
errorest(formula=logm12, data=DFStrainVal, estimator = "cv",predict= mypredict.lda)
errorest(formula=SellYear ~ StyleCat:LengthF, data=DFStrainVal, estimator = "cv",predict= mypredict.lda)
errorest(logm12, data=DFStrainVal, estimator = "cv",predict= mypredict.lda)
errorest(model=logm12, data=DFStrainVal, estimator = "cv",predict= mypredict.lda)
errorest(logm12, data=DFStrainVal, estimator = "cv",predict= mypredict.lda,model=inclass)
errorest(logm12, data=DFStrainVal, estimator = "cv",predict= mypredict.lda,model=glm)
errorest(logm12, data=DFStrainVal, estimator = "cv",predict= mypredict.lda,model=lm)
errorest(formula=as.factor(SellYear) ~ StyleCat:LengthF, data=DFStrainVal, estimator = "cv",predict= mypredict.lda)
errorest(formula=as.factor(SellYear) ~ as.factor(StyleCat):LengthF, data=DFStrainVal, estimator = "cv",predict= mypredict.lda)
logm12
logm12$call
logm13 <- glm(formula = SellYear ~ StyleCat:LengthF, family = "binomial",
data = DFStrain, na.action = na.exclude)
summary(logm13)
names(logm13)
summary(logm13$fitted.values)
summary(logm13$effects)
summary(logm13$linear.predictors)
summary(logm13$formula)
table(round(logm13$fitted.values))
table(round(logm13$y))
table(round(logm13$fitted.values),logm13$y)
names(logm13)
logm12$model
names(logm13)
logm13$aic
logm12$aic
logm12$call
logm13$call
table(logm13$y)
231/(231+656)
table(logm13$fitted.values)
for i in 1:99 {print i}
?for
for (i in 1:99) {print i}
for (i in 1:99) {i}
table(logm13$y,logm13$fitted.values)
table(logm13$y,round(logm13$fitted.values))
table(round(logm13$fitted.values)-.1,logm13$y)
table(round(logm13$fitted.values)+.1,logm13$y)
table(round(logm13$fitted.values),logm13$y)
table(round(logm13$fitted.values-.2),logm13$y)
i
table(round(logm13$fitted.values-i/100),logm13$y)
231+653+3
table(round(logm13$fitted.values-i/100),logm13$y)$diag
table(round(logm13$fitted.values-i/100),logm13$y).diag
table(round(logm13$fitted.values-i/100),logm13$y)[1,1]
table(round(logm13$fitted.values-i/100),logm13$y)[1,2]
table(round(logm13$fitted.values-i/100),logm13$y)[2.1]
table(round(logm13$fitted.values-i/100),logm13$y)[2,2]
table(round(logm13$fitted.values-i/100),logm13$y)[1,1]*table(round(logm13$fitted.values-i/100),logm13$y)[2,2]
table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+table(round(logm13$fitted.values-i/100),logm13$y)[2,2]
(table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
for (i in 1:99){(table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887}
for (i in 10:20){(table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887}
plot(for (i in 10:20){(table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887})
for (i in 10:20){
acc[i] <- (table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
acc <- 1:99
for (i in 1:99){
acc[i] <- (table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
for (i in 1:20){
acc[i] <- (table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
for (i in 1:20){
acc[i] <- (table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
acc <- 1:20
for (i in 1:20){
acc[i] <- (table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
acc[5]
for (i in 1:90){
acc[i] <- (table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
acc <- 1:99
for (i in 1:90){
acc[i] <- (table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
for (i in 1:50){
acc[i] <- (table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
for (i in 1:30){
acc[i] <- (table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
for (i in 1:40){
acc[i] <- (table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
for (i in 1:50){
acc[i] <- (table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
for (i in 1:40){
acc[i] <- (table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
?plot
plot(x=1:40,y=acc[x])
plot(x=1:40,y=acc[i])
plot(x=1:40,y=acc[x])
table(acc[i])
for (i in 1:40)
for (i in 1:40) {acc[i]}
for (i in 1:40) {print(acc[i])}
for (i in 1:40) {print(i,acc[i])}
for (i in 1:40) {print(table((i,acc[i]))}
for (i in 1:40) {print(table(i,acc[i])}
for (i in 1:40) {table(i,acc[i])}
dim(acc)
str(acc)
acc
for (i in 1:40) {print(table((acc[i]))}
table(acc)
print(4)
print(acc)
str(acc)
print(acc)
str(acc)
summary(acc)
acc[]:
acc[1:10]
acc[10:20]
acc$call
acc
acc
for (i in 1:50){
accMinus[i] <- (table(round(logm13$fitted.values+i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
accMinus <- 1:50
for (i in 1:50){
accMinus[i] <- (table(round(logm13$fitted.values+i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
accMinus <- 1:40
for (i in 1:40){
accMinus[i] <- (table(round(logm13$fitted.values+i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
accMinus
acc
acc <- acc[1:44]
accMinus
acc
table(round(logm13$fitted.values+.01),logm13$y)
?Kappa.test
library(fmsb)
for (i in 1:40){
accMinus[i] <- Kappa.test(round(logm13$fitted.values+i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])
}
for (i in 1:40){
accMinus[i] <- Kappa.test(round(logm13$fitted.values+i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])
}
for (i in 1:40){
accMinus[i] <- Kappa.test((round(logm13$fitted.values+i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])
}
for (i in 1:40){
accMinus[i] <- Kappa.test((round(logm13$fitted.values+i/100),logm13$y))
}
for (i in 1:40){
accMinus[i] <- Kappa.test((round(logm13$fitted.values+i/100),logm13$y))
}
names(logm13)
logm13$terms
names(logm13)
logm13$coefficients
names(logm13)
summary(names(logm13))
logm13$xlevels
logm13$contrasts
logm13$method
logm13$control
names(logm13)
logm13$converged
fitted(logm13)
summary(fitted(logm13))
summary(logm13$fitted.values)
for (i in 1:40){
accMinus[i] <- Kappa.test((round(logm13$fitted.values+i/100),logm13$y))
}
for (i in 1:40){
accMinus[i] <- Kappa.test(table(round(logm13$fitted.values+i/100),logm13$y)))
}
for (i in 1:40){
accMinus[i] <- Kappa.test(table(round(logm13$fitted.values+i/100),logm13$y))
}
for (i in 1:40){
accMinus[i] <- Kappa.test(table(round(logm13$fitted.values+i/100),logm13$y))
}
?Kappa.test
for (i in 1:40){
accMinus[i] <- Kappa.test(x=table(round(logm13$fitted.values+i/100),logm13$y))
}
Kappa.test(x=table(round(logm13$fitted.values+i/100),logm13$y))
Kappa.test(x=table(round(logm13$fitted.values+i/100),logm13$y))
i
Kappa.test(round(logm13$fitted.values+i/100),logm13$y)
Kappa.test(x=table(round(logm13$fitted.values+i/100),logm13$y))
table(round(logm13$fitted.values+i/100),logm13$y)
table(round(logm13$fitted.values),logm13$y)
table(round(logm13$fitted.values+i/100),logm13$y)
table(round(logm13$fitted.values-i/100),logm13$y)
table(round(logm13$fitted.values+1/100),logm13$y)
table(round(logm13$fitted.values+2/100),logm13$y)
table(round(logm13$fitted.values+7/100),logm13$y)
table(round(logm13$fitted.values+8/100),logm13$y)
for (i in -5:40){
acc[i] <- Kappa.test(x=table(round(logm13$fitted.values-i/100),logm13$y))
}
warnings()
table(round(logm13$fitted.values+i/100),logm13$y)
table(round(logm13$fitted.values+7/100),logm13$y)
Kappa.test(table(round(logm13$fitted.values+7/100),logm13$y))
names(Kappa.test(table(round(logm13$fitted.values+7/100),logm13$y)))
Kappa.test(table(round(logm13$fitted.values+7/100),logm13$y))$result
Kappa.test(table(round(logm13$fitted.values+5/100),logm13$y))$result
Kappa.test(table(round(logm13$fitted.values+5/100),logm13$y))$Result
Kappa.test(table(round(logm13$fitted.values+5/100),logm13$y))$Judgement
Kappa.test(table(round(logm13$fitted.values+5/100),logm13$y))$Judgement
for (i in -5:40){
Kappa.test(table(round(logm13$fitted.values+5/100),logm13$y))$Judgement}
for (i in -5:40){
print(Kappa.test(table(round(logm13$fitted.values+5/100),logm13$y))$Judgement)}
?Kappa.test
for (i in -5:40){
print(Kappa.test(table(round(logm13$fitted.values+5/100),logm13$y))$Result)}
for (i in -5:40){
print(Kappa.test(table(round(logm13$fitted.values+i/100),logm13$y))$Result)}
for (i in -3:40){
print(Kappa.test(table(round(logm13$fitted.values+i/100),logm13$y))$Result)}
for (i in -5:40){
print(Kappa.test(table(round(logm13$fitted.values+5/100),logm13$y))$Result)}
for (i in -5:40){
print(Kappa.test(table(round(logm13$fitted.values+i/100),logm13$y))$Result)}
for (i in -5:20){
print(Kappa.test(table(round(logm13$fitted.values+i/100),logm13$y))$Result)}
for (i in 5:20){
print(Kappa.test(table(round(logm13$fitted.values+i/100),logm13$y))$Result)}
for (i in 5:20){
Kappa.test(table(round(logm13$fitted.values+i/100),logm13$y))$Result}
for (i in 5:20){
Kappa.test(table(round(logm13$fitted.values+5/100),logm13$y))$Result}
for (i in 5:20){
Kappa.test(table(round(logm13$fitted.values+i/100),logm13$y))$Result}
for (i in 10:12){
Kappa.test(table(round(logm13$fitted.values+i/100),logm13$y))$Result}
for (i in -5:40){
Kappa.test(table(round(logm13$fitted.values+i/100),logm13$y))$Result}
for (i in -5:40){
Kappa.test(table(round(logm13$fitted.values),logm13$y))$Result}
for (i in -5:40){
Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result}
for (i in -5:40){
print(Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result)}
for (i in -5:40){
print(Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result.estimate)}
for (i in -5:40){
print(Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result.conf.int)}
for (i in -5:40){
print(Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Judgement)}
for (i in -5:40){
print(Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$statistic)}
for (i in -5:40){
print(Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate)}
for (i in -5:40){
summary(Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate)}
for (i in -5:40){
print(Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate)}
summary(for (i in -5:40){
print(Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate)})
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate))})
summary(for (i in -5:40){
print(c(round(i),Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate))})
summary(for (i in -5:40){
print(c(round(i,0),Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate))})
summary(for (i in -5:40){
print(c(trunc(i,0),Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate))})
summary(for (i in -5:40){
print(c(truncate(i,0),Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate))})
summary(for (i in -5:40){
print(c(trunc(i,0),Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate))})
summary(for (i in -5:40){
print(c(trunc(i,2),Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate))})
summary(for (i in -5:40){
print(c(trunc(i,1),Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate))})
summary(for (i in -5:40){
print(c(trunc(i,-1),Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate))})
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate))})
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate,acc[i]))})
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$estimate,acc[i]))})
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$statistic,acc[i]))})
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result$conf.int,acc[i]))})
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Result,acc[i]))})
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Judgement,acc[i]))})
names(Kappa.test)
dim(Kappa.test)
summary(for (i in -5:40){
print(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Judgement,acc[i])})
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))$Judgement,acc[i]))})
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))[1],acc[i]))})
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))[2],acc[i]))})
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))[3],acc[i]))})
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))[4],acc[i]))})
acc[25]
for (i in -5:40){
acc[i] <- (table(round(logm13$fitted.values-i/100),logm13$y)[1,1]+
table(round(logm13$fitted.values-i/100),logm13$y)[2,2])/887
}
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))[4],acc[i]))})
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))[4],acc[i]))})[1:10]
summary(for (i in -5:40){
print(c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))[4],acc[i]))})
c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y))[4],acc[i])
c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y)),acc[i])
c(i,Kappa.test(table(round(logm13$fitted.values-i/100),logm13$y)),acc[i])
library(fmsb)
?errorest
??errorest
library(ipred)
errorest(formula=as.factor(SellYear) ~ as.factor(StyleCat):LengthF, data=DFStrainVal, estimator = "cv",predict= mypredict.lda)
errorest(formula=SellYear ~ StyleCat + LengthF, data=DFStrainVal, model=lda,estimator = "cv",predict= mypredict.lda)
?lda
library(MASS)
errorest(formula=SellYear ~ StyleCat + LengthF, data=DFStrainVal, model=lda,estimator = "cv",predict= mypredict.lda)
?lda
lda(formula=SellYear ~ StyleCat + LengthF, data=DFStrainVal)
lda(formula=SellYear ~ StyleCat + LengthF + Brand, data=DFStrainVal)
lda(formula=SellYear ~ StyleCat + LengthF, data=DFStrainVal)
lda(formula=SellYear ~ StyleCat + LengthF + Brand, data=DFStrainVal)
dim(DFStrainVal)
dim(DFStest)
lda1 <- lda(formula=SellYear ~ StyleCat + LengthF + Brand, data=DFStrainVal)
lda1 <- lda(formula=SellYear ~ StyleCat + LengthF, data=DFStrainVal)
summary(lda1)
lda(formula=SellYear ~ StyleCat:LengthF, data=DFStrainVal)
levels(DFStrainVal$Brand)
library(caret)
install.packages(caret)
install.packages('caret')
library(tree):library(lattice)
library(tree);library(lattice)
q()
library(tree);library(lattice);library(boot);library(MASS);library(fmsb);library(e1071);library(ipred)
library(caret)
lda1
lda1 <- lda(formula=SellYear ~ StyleCat + LengthF, data=DFStrainVal)
lda(formula=SellYear ~ StyleCat + LengthF+Brand, data=DFStrainVal)
?errorest
errorest(formula=SellYear ~ StyleCat + LengthF, data=DFStrainVal, model=lda,estimator = "cv",predict= mypredict.lda)
errorest(formula=SellYear ~ StyleCat + LengthF, data=DFStrainVal, model=lm,estimator = "cv",predict= mypredict.lda)
errorest(formula=SellYear ~ StyleCat + LengthF, data=DFStrainVal, model=glm,estimator = "cv",predict= mypredict.lda)
lda(formula=SellYear ~ StyleCat + LengthF+Brand, data=DFStrainVal)
?lda
?qda
qda(formula=SellYear ~ StyleCat + LengthF+Brand, data=DFStrainVal)
qda(formula=SellYear ~ StyleCat + LengthF, data=DFStrainVal)
mypredict.lda
errorest(formula=SellYear ~ StyleCat + LengthF, data=DFStrainVal, model=glm,estimator = "cv",predict= mypredict.lda)
errorest(formula=as.factor(SellYear) ~ StyleCat + LengthF, data=DFStrainVal, model=glm,estimator = "cv",predict= mypredict.lda)
errorest(formula=as.factor(SellYear) ~ as.factor(StyleCat) + LengthF, data=DFStrainVal, model=glm,estimator = "cv",predict= mypredict.lda)
errorest(formula=as.factor(DFStrainVal$SellYear) ~ as.factor(StyleCat) + LengthF, data=DFStrainVal, model=glm,estimator = "cv",predict= mypredict.lda)
errorest(formula=as.factor(DFStrainVal$SellYear) ~ as.factor(DFStrainVal$StyleCat) + LengthF, data=DFStrainVal, model=glm,estimator = "cv",predict= mypredict.lda)
errorest(formula=as.factor(DFStrainVal$SellYear) ~ as.factor(DFStrainVal$StyleCat) + DFStrainVal$LengthF, data=DFStrainVal, model=glm,estimator = "cv",predict= mypredict.lda)
errorest(formula=SellYear ~ StyleCat + LengthF, data=DFStrainVal, estimator = "cv",predict= mypredict.lda)
errorest(formula=SellYear ~ StyleCat:LengthF, data=DFStrainVal, model=logm12,estimator = "cv",predict= mypredict.lda)
errorest(formula=SellYear ~ StyleCat:LengthF, data=DFStrainVal, model=glm,estimator = "cv",predict= mypredict.lda)
library(randomForest)
install.packages(randomForest)
install.packages('randomForest')
library(randomForest)
errorest(Species ~ ., data = iris, model = randomForest)$error
errorest(SellYear ~ ., data = DFStrainVal, model = randomForest)$error
errorest(SellYear ~ Brand + LengthF, data = DFStrainVal, model = randomForest)$error
errorest(SellYear ~ Brand + LengthF + StyleCat, data = DFStrainVal, model = randomForest)$error
errorest(SellYear ~ Brand + LengthF + StyleCat:LengthF, data = DFStrainVal, model = randomForest)$error
errorest(SellYear ~ Brand + StyleCat:LengthF, data = DFStrainVal, model = randomForest)$error
errorest(SellYear ~ Brand + LengthF + StyleCat:LengthF, data = DFStrainVal, model = glm)$error
install.packages('rpart')
library(rpart)
mypredict.rpart <- function(object, newdata)
+ predict(object, newdata, type="class")
mypredict.rpart <- function(object, newdata)
predict(object, newdata, type="class")
errorest(Species ~ ., data = iris, model = rpart, predict=mypredict.rpart)
errorest(SellYear ~ Brand + LengthF + StyleCat:LengthF, data = DFStrainVal, model = rpart)$error
errorest(SellYear ~ Brand + LengthF + StyleCat, data = DFStrainVal, model = rpart)$error
errorest(as.factor(SellYear) ~ Brand + LengthF + StyleCat, data = DFStrainVal, model = rpart)$error
errorest(SellYear ~ Brand + LengthF + StyleCat, data = DFStrainVal, model = rpart)$error
errorest(SellYear ~ Brand + LengthF + StyleCat, data = DFStrainVal, model = rpart,predict=mypredict.rpart)$error
errorest(SellYear ~ Brand + LengthF + StyleCat, data = DFStrainVal, model = naiveBayes,predict=mypredict.lda)$error
mypredict.naiveBayes <- function(object, newdata) {
predict(object, newdata[,-1]) # assume 1st column of "newdata" is
# response, rest is predictors.
}
names(DFStrainVal)
mypredict.naiveBayes <- function(object, newdata) {
predict(object, newdata[,c(1,5,6)]) # assume 1st column of "newdata" is
# response, rest is predictors.
}
errorest(SellYear ~ Brand + LengthF + StyleCat, data = DFStrainVal, model = naiveBayes,predict=mypredict.naiveBayes)$error
errorest(SellYear ~ ., data = DFStrainVal, model = naiveBayes,predict=mypredict.naiveBayes)$error
library(class)
mypredict.knn <- function(object, newdata)
predict.ipredknn(object, newdata, type="class")
errorest(SellYear ~ ., data = DFStrainVal, model = ipredknn,predict=mypredict.knn)$error
errorest(SellYear ~ Brand + StyleCat + LengthF, data = DFStrainVal, model = ipredknn,predict=mypredict.knn)$error
knn1CV <- errorest(SellYear ~ Brand + StyleCat + LengthF, data = DFStrainVal, model = ipredknn,predict=mypredict.knn)$error
naiveBayes1CV <- errorest(SellYear ~ ., data = DFStrainVal, model = naiveBayes,predict=mypredict.naiveBayes)$error
rm(logmCV12a,logmCV5,logmCV6,logmCV7)
rm(logmtrain,logmtrain1,logmvalidate)
errorest(formula=SellYear ~ StyleCat + LengthF, data=DFStrainVal, model=lda,estimator = "cv",predict= mypredict.lda)
errorest(formula=SellYear ~ StyleCat + LengthF, data=DFStrainVal, model=lda,estimator = "cv",predict= mypredict.lda)$error
ldaCV1 <- errorest(formula=SellYear ~ StyleCat + LengthF, data=DFStrainVal, model=lda,estimator = "cv",predict= mypredict.lda)$error
errorest(SellYear ~ Brand + LengthF + StyleCat, data = DFStrainVal, model = rpart,predict=mypredict.rpart)$error
treeCV1 <- errorest(SellYear ~ Brand + LengthF + StyleCat, data = DFStrainVal, model = rpart,predict=mypredict.rpart)$error
rm(classifier,classifierSurf,lda1,lm1,lm2,logm.boot)
rm(logm14,logm15,logm16,logm17,logm18)
rm(logm20,logm3,logm4)
rm(logm5,logm6,logm7)
svm.model10$call
errorest(SellYear ~ Brand + StyleCat + LengthF, data = DFStrainVal, model = svm)$error
svmCV1 <- errorest(SellYear ~ Brand + StyleCat + LengthF, data = DFStrainVal, model = svm)$error
errorest(SellYear ~ Brand + StyleCat + LengthF, data = DFStrainVal, model = glm)$error
errorest(SellYear ~ Brand + StyleCat + LengthF, data = DFStrainVal, model = glm,predict=mypredict.lda)$error
mypredict.logreg <- function(object, newdata)
as.factor(predict(object, newdata, type="class"))
errorest(SellYear ~ Brand + StyleCat + LengthF, data = DFStrainVal, model = glm,predict=mypredict.logreg)$error
svmCV2 <- errorest(SellYear ~ StyleCat + Brand:LengthF, data = DFStrainVal, model = svm)$error
install.packages('mda')
library(mda)
errorest(SellYear ~ StyleCat + Brand:LengthF, data = DFStrainVal, model = mda)$error
errorest(SellYear ~ StyleCat + Brand:LengthF, data = DFStrainVal, model = fda)$error
errorest(SellYear ~ StyleCat + Brand:LengthF, data = DFStrainVal, model = lda)$error
errorest(SellYear ~ StyleCat + Brand+LengthF, data = DFStrainVal, model = mda)$error
errorest(SellYear ~ StyleCat + Brand+LengthF, data = DFStrainVal, model = fda)$error
errorest(SellYear ~ StyleCat + Brand+LengthF, data = DFStrainVal, model = lda)$error
errorest(SellYear ~ StyleCat + Brand+LengthF, data = DFStrainVal, model = lda,predict=mypredict.lda)$error
errorest(SellYear ~ StyleCat + LengthF, data = DFStrainVal, model = lda,predict=mypredict.lda)$error
errorest(SellYear ~ StyleCat + LengthF, data = DFStrainVal, model = mda,predict=mypredict.lda)$error
errorest(SellYear ~ StyleCat + LengthF, data = DFStrainVal, model = mda)$error
errorest(SellYear ~ StyleCat + LengthF, data = DFStrainVal, model = fda)$error
fdaCV1 <- errorest(SellYear ~ StyleCat + LengthF, data = DFStrainVal, model = fda)$error
rm(lm2CV,logmCV10High,logmCV11)
fdaCV2 <- errorest(SellYear ~ StyleCat:LengthF, data = DFStrainVal, model = fda)$error
logmCV10$call
errorest(SellYear ~ StyleCat + LengthF, data = DFStrainVal, model = glm)$error
errorest(SellYear ~ StyleCat:LengthF, data = DFStrainVal, model = glm)$error
names(fdaCV1)
naiveBayes1CV$call
naiveBayes1CV
naiveBayes(SellYear ~ Brand + LengthF + StyleCat,data=DFStrainVal)
?naiveBayes
naiveBayes(SellYear ~ Brand + LengthF + StyleCat,data=DFStrainVal)
naiveBayes1 <- naiveBayes(SellYear ~ Brand + LengthF + StyleCat,data=DFStrainVal)
names(naiveBayes1)
naiveBayes1$apriori
table(DFStrainVal$SellYear)
naiveBayes1$tables
naiveBayes1$levels
naiveBayes1$call
names(naiveBayes1)
naiveBayes1$tables[1]
naiveBayes1$tables[2]
naiveBayes1$tables[3]
levels(droplevels(DFStrainVal$Brand))
levels(droplevels(DFStrain$Brand))
levels(droplevels(DFStest$Brand))
levels(droplevels(DFS$Brand))
levels(droplevels(DFStestVal$Brand))
ldaCV2 <- errorest(SellYear ~ StyleCat + LengthF+Brand, data = DFStrainVal, model = lda)$error
q()
View(SurfboardSalesNewAll)
tail(SurfboardSalesNewAll)
tail(DF.NoNA)
summary(Surfboards)
table(Surfboards$Length)
features(DF.NoNA$StyleCat)
levels(DF.NoNA$StyleCat)
